name: CI Multi-Platform

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "120deac3062162151622ca4860575a33844ba10b"

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"
  push:
    branches:
      - master
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"
      - "res/**"
      - "appimage/**"
      - "flatpak/**"

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: aarch64-unknown-linux-gnu   , os: ubuntu-20.04, use-cross: true }
          - { target: i686-pc-windows-msvc        , os: windows-2022                  }
          - { target: x86_64-apple-darwin         , os: macos-13                      }
          - { target: x86_64-pc-windows-msvc      , os: windows-2022                  }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-22.04                  }
    steps:
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install prerequisites
      shell: bash
      run: |
        case ${{ matrix.job.target }} in
          x86_64-unknown-linux-gnu)
            sudo apt-get -y update
            sudo apt-get install -y \
               clang \
               cmake \
               curl \
               gcc \
               git \
               g++ \
               libpam0g-dev \
               libasound2-dev \
               libunwind-dev \
               libgstreamer1.0-dev \
               libgstreamer-plugins-base1.0-dev \
               libgtk-3-dev \
               libpulse-dev \
               libva-dev \
               libvdpau-dev \
               libxcb-randr0-dev \
               libxcb-shape0-dev \
               libxcb-xfixes0-dev \
               libxdo-dev \
               libxfixes-dev \
               nasm \
               wget
            ;;
          aarch64-unknown-linux-gnu)
            sudo apt-get -y update
            sudo apt-get -y install gcc-aarch64-linux-gnu
            ;;
        esac

    - name: Setup vcpkg with Github Actions binary cache
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: /opt/artifacts/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        $VCPKG_ROOT/vcpkg install --x-install-root="$VCPKG_ROOT/installed"
      shell: bash

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.job.target }}
        components: ''

    - name: Show version information (Rust, cargo, GCC)
      shell: bash
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V

    - uses: Swatinem/rust-cache@v2

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: build
        args: --locked --target=${{ matrix.job.target }}

    - name: clean
      shell: bash
      run: |
        cargo clean

    - name: Set testing options
      id: test-options
      shell: bash
      run: |
        # test only library unit tests and binary for arm-type targets
        unset CARGO_TEST_OPTIONS

        case ${{ matrix.job.target }} in
          arm-* | aarch64-*)
            CARGO_TEST_OPTIONS="--lib --bin ${PROJECT_NAME}"
            ;;
          *)
            CARGO_TEST_OPTIONS="--workspace --no-fail-fast -- --skip test_get_cursor_pos --skip test_get_key_state"
            ;;
        esac;

        echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_ENV
        echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_OUTPUT

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: test
        args: --locked --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}